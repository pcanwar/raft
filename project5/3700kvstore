#!/usr/bin/env python

import sys, socket, select, time, json, random

#STATE:
#last term server has seen 
#current_term = 0
#candidate_id that received vote in current term
#voted_for = None
#log entries; each entry contains command for state machine,
#and term when entry was received by leader
#log[] = list()
#index of highest log entry known to be committed
#commit_index = 0
#index of highest log entry applied to state machine
#last_applied = 0
#index of the next log entry to send to that server
#nextIndex[] = leader of last log index + 1
#index of highest log entry known to be replicated
#matchIndex[]

#AppendEntries RPC
#term = leader's term
#so follower can redirect clients
#leaderId = 
#index of log entry immediately preceding new ones
#prevLogIndex = 
#term of prevLogIndex entry
#prevLogTerm = 
#log entries to store
#(empty for heartbeat; may send more than one for efficiency) 
#entries[]
#leader's commitIndex
#leaderCommit

#RequestVote RPC
#candidate's term
#term
#candidate's requesting vote
#candidateId
#index of candidate's last long entry
#lastLogIndex
#term of candidate's last log entry
#lastLogTerm


# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0

while True:
	ready = select.select([sock], [], [], 0.1)[0]
	
	if sock in ready:
		msg_raw = sock.recv(32768)
		
		if len(msg_raw) == 0: continue
		msg = json.loads(msg_raw)
		
		# For now, ignore get() and put() from clients
		if msg['type'] in ['get', 'put']:
                        pass
		
		# Handle noop messages. This may be removed from your final implementation
		elif msg['type'] == 'noop':
			print '%s received a NOOP from %s' % (msg['dst'], msg['src'])
		
	clock = time.time()
	if clock-last > 2:
		# Send a no-op message to a random peer every two seconds, just for fun
		# You definitely want to remove this from your implementation
		msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
		sock.send(json.dumps(msg))
		print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
		last = clock
