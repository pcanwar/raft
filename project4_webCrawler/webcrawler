#!/usr/bin/python

import socket
import sys
from urlparse import urlparse
from http import *


#import requests
#from lxml import html

USERNAME = "1778409"
PASSWORD = "ZUE3UDQE"

fakebook_url = urlparse('http://fring.ccs.neu.edu/fakebook/')
login_url = urlparse('http://fring.ccs.neu.edu/accounts/login/?next=/fakebook/')
full_login_path = "/accounts/login/?next=/fakebook/"
HOST = fakebook_url.netloc 
# fakebook_url.netloc fring.ccs.neu.edu
FAKEBOOK_PATH = fakebook_url.path
LOGIN_PATH = login_url.path
HTTP_VERSION = "HTTP/1.1"

PORT = 80
HOST_PORT = (HOST, PORT)

urls_visited = []
urls_tovisit = []
secret_flags = []


# create the socket
try:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
except socket.error as e:
    print 'ERROR: Failed to create socket!'
    exit(1)



class PageParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.csrf = None
        self.session_id = None
        self.secret_flag_found = False

    def handle_starttag(self, tag, attrs):
        global urls_visited, urls_tovisit, secret_flags
        # find links in the page
        if tag == 'a':
            for attr, val in attrs:
                if attr == 'href':
                    # only add to tovisit list if the url has not been visited
                    # doesn't exist in tovisit list already, and it's valid
                    if val not in urls_visited and val not in urls_tovisit and "fring.ccs.neu.edu" in val:
                        urls_tovisit.append(val)
                        print("add a new valid url to visit: %s" % val)
        # find secret flag
        if tag == 'h2':
            for attr, val in attrs:
                if attr == 'class' and val == 'secret_flag':
                    secret_flag = True



    def handle_endtag(self, tag):
        global urls_visited, urls_tovisit
        #print("end tag: " + str(tag))
        if tag == "html":
            # remove the url from tovisit list

            # add to visited list
            #urls_tovisit.remove()
            pass

    def handle_data(self, data):
        global urls_visited, urls_tovisit, secret_flags
        #print("Data: " + data)
        if "csrftoken" in data:
            self.csrf = data.split("csrftoken=")[1].split(";")[0]

        if "sessionid" in data:
            self.session_id = data.split("sessionid=")[1].split(";")[0]

        if self.secret_flag_found:
            flag = data.split(" ")[1]
            if flag not in secret_flags:
                secret_flags.append(flag)
                self.secret_flag_found = False
                print "found one secret flag %s" % str(flag)

            


"""
    HTTP GET request
"""
def http_GET(path):
    global HOST_PORT, HOST, HTTP_VERSION
    request = Request("GET", path, HTTP_VERSION, HOST)
    #print("getr" + get_request.get_str())
    sock.sendall(request.get_request())
    response = sock.recv(9000)
    return response



"""
    HTTP POST request
"""
def http_POST(path, data, token, session_id):
    global HOST_PORT, HTTP_VERSION, HOST
    request = Request("POST", path, HTTP_VERSION, HOST, data, token, session_id)
    print '==========================POST Request======================'
    print(request.post_request(token, session_id))
    sock.sendall(request.post_request(token, session_id))
    response = sock.recv(9000)
    return response


"""
Logging in to fakebook, HTTP POST
1. initial GET request
2. POST with csrf tocken and sessionid
3. get new session id
4. GET with new session id
"""
def login():
    global LOGIN_PATH, HOST, USERNAME, PASSWORD, HOST_PORT, full_login_path
    # connect to the socket
    sock.connect(HOST_PORT)
    # get request
    print '==========================GET Request======================'
    get_response = http_GET(full_login_path)
    print("gs" + str(get_response))
    parser = PageParser()
    parsed_response = parser.feed(get_response)
    # get csrf token and session id
    token = str(parser.csrf)
    session_id = str(parser.session_id)
    print '==========================token and session======================'
    print token
    print session_id
    data = "username=%s&password=%s&csrfmiddlewaretoken=%s" % (USERNAME, PASSWORD, token)
    # create POST request
    post_response = http_POST(full_login_path, data, token, session_id)
    print('-------------------------POST Response---------------------------------')
    print("ps" + str(post_response))

    # new_session_id = parser.feed(post_response).sessionid

    request = Request("GET", "", HTTP_VERSION, HOST)
    # print("getr" + request.get_request())
    sock.sendall(request.get_2nd_request(token, session_id))
    response = sock.recv(9000)
    print('-------------------------2nd GET Response---------------------------------')
    print response
    # #sock.setblocking(0)

    # GET with cookie
    # handle_http_status_codes(response, full_login_path)

# read through xml and find flags, find hyperlinks, and recurse get

"""
    handle returned status codes
    200 - accepted
    301 - moved permanently. try the request again using the new URL given by the server in the Location header.
    403 - Forbidden
    404 - Not Found 
     Our web server may return these codes in order to trip up your crawler.
     In this case, your crawler should abandon the URL that generated the error code.
    500 - Internal Server Error
     Our web server may randomly return this error code to your crawler.
     In this case, your crawler should re-try the request for the URL until the request is successful.
"""

def handle_http_status_codes(response, url):
    status_code = response.split(' ')[1]
    if status_code == '200':
         # good
         pass
    if status_code == '301':
        new_url = response.split('Location: ')[1].split('\n')[0]
        # TODO make get (cookie) request again
        # TODO remove url from tovisit, add to visited
    if status_code == '403' or status_code == '404':
        # abondon url
        # TODO remove url from tovisit, add to visited
        urls_tovisit.remove(url)
    if status_code == '500':
        # TODO make get (cookie) request again
        pass



    
def login_requests():
    global USERNAME, PASSWORD
    session_requests = requests.session()

    # Get login csrf token
    result = session_requests.get('http://fring.ccs.neu.edu/accounts/login?next=fakebook/')
    
    authenticity_token = '302f8c64d654abdb9f6d4db5ef5f76a4'

    # Create payload
    payload = {
        "username": USERNAME, 
        "password": PASSWORD, 
        "csrfmiddlewaretoken": authenticity_token
    }
    # Perform login
    result = session_requests.post('http://fring.ccs.neu.edu/accounts/login?next=fakebook/', data = payload, headers = dict(referer = LOGIN_PATH))
    print(result)
    #result = session_requests.get(URL, headers = dict(referer = URL))


"""
# a list of sites that are visited
# a list of sites to be visited
# only craw the pages that are valid, starts with fring.ccs.neu.edu

# loggin:
    # 
# Request class / Reponse class
# implement HTTP/1.1:
    # contains host in the header
# HTTP requests:
    # GET
    # POST
    # COOKIE MANAGEMENT
# HTTP Response:
    # 301
    # 403
    # 404
    # 500
# Interpret the responded html, and find flgas
"""
def main():
    
    login()
    #login_requests()

if __name__ == "__main__":
    main()


