#!/usr/bin/python

import socket
import sys
from urlparse import urlparse
from HTMLParser import HTMLParser


USERNAME = "1778409"
PASSWORD = "ZUE3UDQE"

fakebook_url = urlparse('http://fring.ccs.neu.edu/fakebook/')
login_url = urlparse('http://fring.ccs.neu.edu/accounts/login/?next=/fakebook/')
full_login_path = "/accounts/login/?next=/fakebook/"
HOST = fakebook_url.netloc 
# fakebook_url.netloc fring.ccs.neu.edu
FAKEBOOK_PATH = fakebook_url.path
LOGIN_PATH = login_url.path
HTTP_VERSION = "HTTP/1.1"

PORT = 80
HOST_PORT = (HOST, PORT)

urls_visited = []
urls_tovisit = []
secret_flags = []

csrf = 0
session_id = 0

# create the socket
"""
try:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
except socket.error as e:
    print 'ERROR: Failed to create socket!'
    exit(1)
"""

class PageParser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.secret_flag_found = False

    def handle_starttag(self, tag, attrs):
        global urls_visited, urls_tovisit, secret_flags
        # find links in the page
        


    def handle_endtag(self, tag):
        global urls_visited, urls_tovisit
        #print("end tag: " + str(tag))
        if tag == "html":
            # remove the url from tovisit list

            # add to visited list
            #urls_tovisit.remove()
            pass

    def handle_data(self, data):
        global urls_visited, urls_tovisit, secret_flags, csrf, session_id
        #print("Data: " + data)
        if "csrftoken" in data:
            csrf = data.split("csrftoken=")[1].split(";")[0]

        if "sessionid" in data:
            session_id = data.split("sessionid=")[1].split(";")[0]


def login_GET():
    global full_login_path, HTTP_VERSION, HOST

    request = "GET %s %s\nHost: %s\n\n" % (full_login_path, HTTP_VERSION, HOST)
    #sock.sendall(request)
    print("LOGIN GET: " + request)
    #response = sock.recv(9000)
    response = send_and_receive(request)
    print("LOGIN GET: " + response)
    return response

def cookie_GET(path):
    global HTTP_VERSION, HOST, csrf, session_id

    #request = "GET %s %s\nHost: %s\n" % (path, HTTP_VERSION, HOST)
    #request+= "Cookie: csrftoken=%s; sessionid=%s\n\n" (csrf, session_id)
    request = '''\
GET %s %s
Host: %s
Cookie: csrftoken=%s; sessionid=%s

''' % (path, HTTP_VERSION, HOST, csrf, session_id)
    #sock.sendall(request)
    print("GET: " + request)
    #response = sock.recv(9000)
    response = send_and_receive(request)
    print("GET: " + response)
    return response

def login_POST(path):
    global HTTP_VERSION, HOST, csrf, session_id, USERNAME, PASSWORD

    data = "username=%s&password=%s&csrfmiddlewaretoken=%s&next=%%2Ffakebook%%2F" % (USERNAME, PASSWORD, csrf)
    #request = "POST %s %s\nHost: %s\n" % (path, HTTP_VERSION, HOST)
    #request += "Content-Length: %d\nCookie: csrftoken=%s; sessionid=%s\n\n" % (len(data), csrf, session_id)
    #request += "%s\n" % (data)
    request = '''\
POST %s %s
Host: %s
Content-Length: %d
Cookie: csrftoken=%s; sessionid=%s

%s
''' % (path, HTTP_VERSION, HOST, len(data), csrf, session_id, data)
    print("LOGIN POST: " + request)
    #sock.sendall(request)
    #response = sock.recv(9000)
    response = send_and_receive(request)
    print("LOGIN POST: " + response)
    return response

def login():
    global HOST_PORT, LOGIN_PATH

    #sock.connect(HOST_PORT)

    get_response = login_GET()
    crawl_webpage(get_response)
    post_response = login_POST(LOGIN_PATH)
    crawl_webpage(post_response)
    handle_http_status_codes(post_response)

def crawl_webpage(response):
    global csrf, session_id

    parser = PageParser()
    parser.feed(response)
    # csrf token and session id should be updated
    print '==========================token and session======================'
    print csrf
    print session_id

def handle_http_status_codes(response):
    status_code = response.split(' ')[1]
    #print(str(status_code))
    if status_code == '200':
         # good
         pass
    if status_code == '301' or status_code == '302':
        new_url = response.split('Location: ')[1].split('\n')[0]
        cookie_GET(new_url)
        # TODO make get (cookie) request again
        # TODO remove url from tovisit, add to visited
    if status_code == '403' or status_code == '404':
        pass
        # abondon url
        # TODO remove url from tovisit, add to visited
    if status_code == '500':
        pass
        # TODO make get (cookie) request again


def main():
    
    login()
    #login_requests()

if __name__ == "__main__":
    main()