#!/usr/bin/python

import socket
import sys
import ssl

PORT = 27998
SSL_PORT = 27999
# HOST = 'cs5700f16.ccs.neu.edu'
# NUID = '001778409'
PATTERN = 'STATUS '

# check input arguments
if len(sys.argv) < 3 or len(sys.argv) > 6:
    print 'Illegal input arguments! Input must follow the pattern: ./client <-p port> <-s> [hostname] [NEU ID]'
    exit(1)

# initial socket
s = None

# create a socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
except socket.error as e:
    print 'Failed to create socket!'
    exit(1)

# read in inputs
if sys.argv[1] == '-p':
    if '-s' in sys.argv:
        if len(sys.argv) != 6:
            s.close()
            print 'Illegal input arguments! Input must follow the pattern: ./client <-p port> <-s> [hostname] [NEU ID]'
            exit(1)
        s = ssl.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM), ssl_version=ssl.PROTOCOL_SSLv23)
    else:
        if len(sys.argv) != 5:
            s.close()
            print 'Illegal input arguments! Input must follow the pattern: ./client <-p port> <-s> [hostname] [NEU ID]'
            exit(1)
    port = int(sys.argv[2])
# use an SSL encrypted socket connection
elif '-p' not in sys.argv and '-s' in sys.argv:
    if len(sys.argv) != 4:
        s.close()
        print 'Illegal input arguments! Input must follow the pattern: ./client <-p port> <-s> [hostname] [NEU ID]'
        exit(1)
    s = ssl.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM), ssl_version=ssl.PROTOCOL_SSLv23)
    port = SSL_PORT
else:
    if len(sys.argv) != 3:
        s.close()
        print 'Illegal input arguments! Input must follow the pattern: ./client <-p port> <-s> [hostname] [NEU ID]'
        exit(1)
    port = PORT

host = sys.argv[len(sys.argv) - 2]
nuid = sys.argv[len(sys.argv) - 1]

# connect to server
try:
    s.connect((host, port))
except socket.error as e:
    print 'Failed to connect to the server!'
    print e
    s.close()
    exit(1)

# send data to server
hello_message = 'cs3700spring2018 HELLO ' + nuid + '\n'
s.sendall(hello_message)

# server should reply: cs3700spring2018 STATUS [a number] [a math operator] [another number]\n
status_reply = s.recv(256)

while PATTERN in status_reply:
    # check the server's response format
    response_array = status_reply.split(' ')
    if 'cs3700spring2018' not in status_reply or len(response_array) > 5 or len(response_array) < 3:
        print 'ERROR: Client received malformed response from the server! Terminating the connection!'
        s.close()
        exit(1)

    # extract math expression from reply
    math_exp = status_reply.split(PATTERN)[1]

    first_num = int(math_exp.split(' ')[0])
    opt = math_exp.split(' ')[1]
    last_num = int(math_exp.split(' ')[2])

    result = None
    if opt == '+':
        result = first_num + last_num
    elif opt == '-':
        result = first_num - last_num
    elif opt == '*':
        result = first_num * last_num
    elif opt == '/':
        result = first_num / last_num

    if result is None:
        print 'ERROR: Math operator in server response cannot be interpreted!'
        s.close()
        exit(1)

    # return solution to the server
    # cs3700spring2018 [the solution]\n
    solution = 'cs3700spring2018 ' + str(result) + '\n'
    s.sendall(solution)
    status_reply = s.recv(256)
    if status_reply == '':
        print 'ERROR: Server terminated the connection due to unexpected response! Maybe solution incorrect.'
        s.close()
        exit(1)

# cs3700spring2018 [a 64 byte secret flag] BYE\n
if 'BYE' in status_reply:
    if 'Unknown_Husky_ID' in status_reply:
        print 'ERROR: Server did not recognize the NEU ID that you supplied in the HELLO message!'
        s.close()
        exit(1)
    secret_flag = status_reply.split(' ')[1]
    print secret_flag
    s.close()
else:
    s.close()
    print 'ERROR: Client received unexpected response from the server! Terminating the connection!'
    exit(1)


