#!/usr/bin/python

import sys
import socket
import time
import datetime
import select
import json
from packets import *

MSG_SIZE = 1500
TIMEOUT = 10
seq = 0
eof = False
max_recv = -1

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

buffered_packets = []


def receive_enqueue_ack():
    global buffered_packets, eof, max_seq
    result = sock.recvfrom(MSG_SIZE)
    if result:
        (data, addr) = result

        try:
            data_json = json.loads(data)
            ack = AckPacket(data_json['seq_num'])
            sock.sendto(json.dumps(ack.as_json()), (UDP_IP, UDP_PORT+1))
            log('send ack about seq: %d' % data_json['seq_num'])
            # if at the end of the message
            if data_json['eof']:
                log("[recv data] " + str(data_json['seq_num']) + " (" + str(len(data_json['data'])))
                eof = True
                max_seq = data_json['seq_num'] + data_json['size']
                buffered_packets.append(data_json)
                return
                #sys.exit(0)
            if data_json['data']:
                log("[recv data] " + str(data_json['seq_num']) + " (" + str(len(data_json['data'])))
                buffered_packets.append(data_json)
                
                #sys.stdout.write(data_json['data'])
        except (ValueError, KeyError, TypeError) as e:
            print("received corrupted packet")
            print(data_json)
            raise e

def process():
    global seq
    acted = True
    while acted:
        acted = False
        for packet in list(buffered_packets):
            if packet['seq_num'] == seq:
                log('read packet %d, waiting for packet %d' % (packet['seq_num'], seq + packet['size']))
                seq += packet['size']
                acted = True
                sys.stdout.write(packet['data'])
                buffered_packets.remove(packet)
            elif packet['seq_num'] < seq:
                buffered_packets.remove(packet)

# Now listen for packets
while True:
#TODO: send ack, organize by seq #
# receive/enqueue data
# process data/send ack
    receive_enqueue_ack()
    process()
    if len(buffered_packets) == 0 and eof and max_seq == seq:
        log('MISSION SUCCESS')
        break
"""
    else:
        log("[ERROR] socket timed out after %d seconds!" % TIMEOUT)
        sys.exit(-1)
"""
