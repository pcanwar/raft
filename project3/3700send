#!/usr/bin/python -u

import sys
import socket
import json
import time
import datetime
import select
from packets import *

# constant
DATA_SIZE = 1000
TIMEOUT = 10
PACKET_TIMEOUT = 4

# global
data_to_be_acked = []
seq_number = 0

IP_PORT = sys.argv[1]

HOST = IP_PORT[0:IP_PORT.find(":")]
PORT = int(IP_PORT[IP_PORT.find(":")+1:])
#HOST = "127.0.0.1"
#PORT = 2000
HOST_PORT = (HOST, PORT)
cwnd = 100

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)
sock.bind((HOST, PORT+1))
#ack_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
#ack_sock.bind((HOST, PORT+1))
def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

"""
    constructs a single packet based on the given data and offset
    @param data - the data content of the packet
    @param offset - the offset of the given data compare to the input chunk
    @return the constructed packet and the new offset
"""
def construct_packet(data, offset):
    # if have more data than DATA_SIZE bytes
    if len(data) > offset + DATA_SIZE:
        # extract DATA_SIZE bytes of data
        result = data[offset:offset + DATA_SIZE]
        # construct a sendPacket(seq_num, data, size, timeout, ack, iseof)
        packet = SendPacket(offset, result, len(result), PACKET_TIMEOUT + time.time(), False, False)
        # update offset
        offset += DATA_SIZE
    # less than DATA_SIZE bytes left
    else:
        # extract the rest of the data
        result = data[offset:]
        # construct a sendPacket(seq_num, data, size, timeout, ack, iseof)
        packet = SendPacket(offset, result, len(result), PACKET_TIMEOUT + time.time(), False, True)
        # update the offset
        offset += len(result)


    return packet, offset

"""
    Constructs a list of packets from the data given,
    if len(data) < 1500, just return [packet]
    @param data - the data to use to construct packets
    @param offset - the offset of the data, keeps track of the current byte location
    @return Array[SendingPacket] - the packets constructed from the given data
"""
def construct_packets_from_data(data, offset):
    packets = []
    while offset < len(data):
        # construct packet w/ 1500 or fewer bytes
        # increment index by how big the packet is
        # repeat
        new_packet, offset = construct_packet(data, offset)
        packets.append(new_packet)

    return packets

"""
    Read input lines and construct data packets (size < 1500 bytes)
    @return Array[SendingPacket] - the packets constructed from the given data
"""
def read_data():
    data_set = ""
    # read in each line and store the lines into data_set list
    for line in sys.stdin:
        data_set += line

    packets_to_send = []
    # construct packets for the input data
    offset = 0
    packets_from_data = construct_packets_from_data(data_set, offset)
    # add the packet(s) to the list of packets
    packets_to_send.extend(packets_from_data)

    return packets_to_send


"""
    Receives acknowledgments of packets from the receiver

"""
def recv_acks():
    global sock, HOST_PORT
    ready, ignore1, ignore2 = select.select([sock], [], [], .1)
    for s in ready:
        msg, addr = s.recvfrom(1000)
        ack = json.loads(msg)
        for packet in list(data_to_be_acked):
            if packet.get_seq_num() == ack['seq_num']:
                data_to_be_acked.remove(packet)
                log("removed packet with seq %d" % packet.get_seq_num())   
        

"""
    Sends data to the receiver
    @param the list of packets to send
    @return true if successfully sent out data, false if error occured
"""
def send_data(packets_to_send):
    global HOST_PORT, cwnd, data_to_be_acked
    while (len(packets_to_send) > 0) and (len(data_to_be_acked) < cwnd):
        packet = packets_to_send[0]
        bytes_sent = sock.sendto(packet.get_json(), HOST_PORT)
        if (bytes_sent >= packet.size):
            log('[SUCCESS] sent packet successfully!')
            del packets_to_send[0]
            data_to_be_acked.append(packet)
        else:
            log('[ERROR] packet send failed!')
    
    return packets_to_send

def check_timeouts(packets_to_send):
    global data_to_be_acked
    result = []
    for packet in list(data_to_be_acked):
        if packet.is_timed_out():
            log('found a tod packet')
            log("before" + str(len(data_to_be_acked)))
            data_to_be_acked.remove(packet)
            log("after" + str(len(data_to_be_acked)))
            packet.set_timeout(time.time() + PACKET_TIMEOUT)
            result.append(packet)
            #TODO change cwnd once tba data times out
    
    #for packet in packets_to_send:
     #   packet.set_timeout(time.time() + PACKET_TIMEOUT)

    return result


def main():
    start = time.time()
    packets_to_send = []
    while True:
        packets_to_send.extend(read_data())
        packets_to_send = send_data(packets_to_send)
        recv_acks() #TODO change cwnd size
        packets_to_send.extend(check_timeouts(packets_to_send))
        #if len(packets_to_send) == 0 and len(data_to_be_acked) == 0:
        if time.time() > start + 10:
            break

if __name__ == "__main__":
    main()



