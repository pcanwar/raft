*High-level Approach:
The bridge handles two types of packets, BPDUs and data.
Before the minimal spanning tree is built up, the bridge queued all the data packets.

The spanning tree is constructed with the following order:
1. Assumes self is the root bridge, until it receives a BPDU that has a smaller root id
2. Determine root port of the bridge
3. Determine designated port(s) of the bridge
4. Disable ports

It handles the BPDUs by viewing its contents:
  if the current root id is smaller than the received BPDU's root id,
  then the current root id does not change

  if the current root id is the same as the received BPDU's root id,
  and the cost to the root of the current bridge is smaller than the cost in the BPDU
  then the port that the bridge received the BPDU becomes a designated port

  if the current root id is the same as the received BPDU's root id,
  and the cost to the root of the current bridge is smaller than the cost in the BPDU,
  and the current bridge id is smaller than the received BPDU's bridge id,
  then the port that the bridge received the BPDU becomes a designated port

  else, the root bridge id of the current bridge changes to the BPDU's root bridge id
  the root port of the bridge also changes to the port that the bridge received the BPDU on,
  the cost to the root becomes the cost on the BPDU + 1,
  the bridge also broadcasts the information to its neighbors

After the spaining tree is built up, the bridge forwards data packets based on the forwarding table.
The forwarding table records the source bridge id with the port number.
When it tries to send data to the destination bridge,
1. it checks if the port number exists in the table, 
2. if yes, forward to the port
3. if not, it forwards the data to all other ports except itself
4. if self is destination, then do not forward the data

It only forwards to enabled ports, and it does not forward to its own port

A port is enabled if:
1. it is a root port
2. it is a designated port
3. it has never received any BPDU


*Challenges Faced:
We were challenged when we ran simple-6.conf. 84 data packets were dropped.
It was extremely difficult to figure out why the packets were dropped.
Since we're programming on the network, we had to use print statements to debug the program.
Not being able to debug efficiently is challenging.


*How I tested the code:
The code was tested by running different configuration files with different number
of LANs, bridges, and data packets. Each tests record how many data packets are forwarded,
and how many data packets are dropped. Based on the final result, we are able to test if
the bridge is able to successfully forward data without duplicates or without dropping any
data packets.



